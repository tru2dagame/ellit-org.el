#+TITLE: ellit-org
#+STARTUP: showall

[[file:ellit-org-logo.svg]]
Emacs Lisp Literate programming tool

#+BEGIN_QUOTE
This file is automatically generated from =ellit-org.el= by
[[https://github.com/zevlg/ellit-org.el][GitHub#ellit-org.el]] tool.
Do not edit manually.
#+END_QUOTE

Generate documentation for Emacs Lisp package by extracting text
from comments of =.el= files and organizing them into single =.org=
file.

Idea is similiar to https://github.com/tumashu/el2org

However =ellit-org= includes simple templating system, which is nice
to have thing in documentation generator tool.

* Why?

Separate files for code and documentanion is hard to get in sync.
Once changing something in source code files, you might change
comments as well and forget about documentation.

Also many things, useful for documentation, might be automatically
extracted from source code.  Such as:
- Keybindings
- Customizable options
- Docstrings for commands
- etc

* Using ellit-org in your project

Sample Makefile to generate user manual for the project:

#+BEGIN_SRC Makefile
EMACS=emacs -Q

manual.org: srcfile.el <list-of-other-files-used-to-generate-manual>
     $(EMACS) -batch -f package-initialize -l ellit-org \
                 --eval '(ellit-org-file "srcfile.el" "manual.org")'
#+END_SRC

See =ellit-org='s [[https://github.com/zevlg/ellit-org.el/blob/master/Makefile][Makefile]]

* Commenting .el files

1. Use double-semicolon comments, otherwise processing won't start
2. Processing starts when Org mode's property, heading or list is seen
3. Processing starts only if matched comment line begins commentary
   block, i.e. previous line is a non-commentary line
4. Processing stops on any non-commentary line

Here is the example:
#+begin_src emacs-lisp
  ;; * Heading1                        <--- processing starts here
  ;; This line is included into output
  ;;
  ;; This line also included into output
                                       <--- processing stops here
  ;; This line is NOT included into output
  ;; * This line also NOT included
  ;;   Since it does not begin the commentary block, see 3.

  ;; - However this line, is included  <--- processing starts here
  ;;
  ;;    Since new processing is started, and it will stop only on
  ;;    non-commentary line below
                                       <--- processing stops here
  ;; This line is *not* included
#+end_src

* Templating

ellit-org includes very simple templating system to automatically
extract useful bits from source code or from Emacs runtime.

Templates substitution is done *after* processing comments, so make
sure your templates are in processed part of the comments.

Templates syntax:
#+begin_example
>>>TEMPLATE_NAME ARGUMENTS<<<
#+end_example
~ARGUMENTS~ are optional string supplied to function which does
processing for ~TEMPLATE_NAME~.

Supported templates:
- ELLIT <file> ::
  Insert results of the FILE processing.
- ELFILE ::
  Insert currently processing filename.
- EVAL <form> ::
  Insert result of the FORM evaluation.
- KEY-V1 [<keymap>:]<command> ::
  Insert keybinding for the command. NOTYET DONE
- KEY-V2 [<keymap>:]<command> ::
  Insert keybinding for the command. NOTYET DONE
- VARDOC1 <variable> ::
  Insert first line from docstring for the VARIABLE.
- VARDOC <variable> ::
  Insert full docstring for the VARIABLE.
- FUNDOC1 <function> ::
  Insert first line from docstring for the FUNCTION.
- FUNDOC <function> ::
  Insert full docstring for the FUNCTION.
