#+TITLE: [[file:ellit-org-logo.svg]] ellit-org

Emacs Lisp Literate programming tool

#+BEGIN_QUOTE
This file is automatically generated from =ellit-org.el= by
[[https://github.com/zevlg/ellit-org.el][GitHub#ellit-org.el]] tool.
Do not edit manually.
#+END_QUOTE

Generate documentation for Emacs Lisp package by extracting text
from =.org= files or comments from =.el= files and combining them
into single =.org= file.

Idea is similar to https://github.com/tumashu/el2org

However =ellit-org= implements more features, such as:
- Easy to use comments extractor from =.el=, see [[* Commenting .el files]]
- Combining multiple files, =.org= or =.el=
- Templating, see [[* Templates]]

* Why?

Separate files for code and documentation is hard to get in sync.
Once changing something in source code files, you might change
comments as well and forget about documentation.  In other words
having documentation in source code is easier to maintain for the
developers.

Also many things, useful for documentation, might be automatically
extracted from source code.  Such as:
- Keybindings
- Customizable options
- Docstrings for commands
- etc

* Using ellit-org in your project

Sample Makefile to generate user manual for the project:

#+BEGIN_SRC Makefile
EMACS=emacs -Q

manual.org: srcfile.el <list-of-other-files-used-to-generate-manual>
     $(EMACS) -batch -f package-initialize -l ellit-org -l srcfile.el \
                 --eval '(ellit-org-file-el "srcfile.el" "manual.org")'
#+END_SRC

See =ellit-org='s [[https://github.com/zevlg/ellit-org.el/blob/master/Makefile][Makefile]]

It is *important* to load =srcfile.el=, not just =srcfile=, to make
*possible for ~fundocX~ templates to emphasize function arguments
in case =srcfile.el= is already compiled.

* Commenting .el files

1. Use double-semicolon comments, otherwise processing won't start
2. Processing starts when Org mode's property, heading or list is seen
3. Processing starts only if matched comment line begins commentary
   block, i.e. previous line is a non-commentary line
4. Processing stops on any non-commentary line

Here is the example:
#+begin_src emacs-lisp
  ;; * Heading1                        <--- processing starts here
  ;; This line is included into output
  ;;
  ;; This line also included into output
                                       <--- processing stops here
  ;; This line is NOT included into output
  ;; * This line also NOT included
  ;;   Since it does not begin the commentary block, see 3.

  ;; - However this line, is included  <--- processing starts here
  ;;
  ;;    Since new processing is started, and it will stop only on
  ;;    non-commentary line below
                                       <--- processing stops here
  ;; This line is *not* included
#+end_src


* Templates

ellit-org relies on Org mode's macro system by adding some useful
macroses.  See https://orgmode.org/manual/Macro-replacement.html

Macro replacement is done *after* processing comments, so make
sure your macroses are in processed part of the comments.

Templates syntax:
#+begin_example
{{{macro_name(arguments)}}}
#+end_example
~ARGUMENTS~ are optional string supplied to function which does
processing for ~MACRO_NAME~.

Supported templates:

- as-is(~STRING~) ::
  Insert ~STRING~ as is.

- ellit-el(~FILE~) ::
  Insert results of the emacs-lisp ~FILE~ processing.

- ellit-org(~FILE~) ::
  Insert results of the org ~FILE~ processing.

- ellit-filename(&optional ~VERBATIM~) ::
  Insert currently processing filename.

- kbd(~KEY~) ::
  Insert HTML <kbd> tag with ~KEY~ contents.

- where-is(~COMMAND~, ~KEYMAP~) ::
  Insert list of keys that calls ~COMMAND~.

- vardoc1(~VARIABLE~) ::
  Insert first line from docstring for the ~VARIABLE~.

- vardoc(~VARIABLE~) ::
  Insert full docstring for the ~VARIABLE~.

- fundoc1(~FUNCTION~) ::
  Insert first line from docstring for the ~FUNCTION~.

- fundoc(~FUNCTION~) ::
  Insert full docstring for the ~FUNCTION~.

