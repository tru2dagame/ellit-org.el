;;; ellit-org.el --- Emacs Lisp Literate programming tool  -*- lexical-binding:t -*-

;; Copyright (C) 2020 by Zajcev Evgeny.

;; Author: Zajcev Evgeny <zevlg@yandex.ru>
;; Created: Wed Jan 22 10:35:15 2020
;; Keywords: convenience
;; Package-Requires: ((emacs "25.1"))
;; URL: https://github.com/zevlg/ellit-org.el
;; Version: 0.1
(defconst ellit-org-version "0.1")

;; ellit-org is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; ellit-org is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with ellit-org.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; #+TITLE: ellit-org
;; #+STARTUP: showall
;;
;; [[file:ellit-org-logo.svg]]
;; Emacs Lisp Literate programming tool
;;
;; #+BEGIN_QUOTE
;; This file is automatically generated from =>>>ELFILE<<<= by
;; ~ellit-org.el v>>>EVAL ellit-org-version<<<~ tool.
;; Do not edit manually.
;; #+END_QUOTE
;;
;; Generate documentation for Emacs Lisp package by extracting text
;; from comments of =.el= files and organizing them into single =.org=
;; file.
;;
;; Idea is similiar to https://github.com/tumashu/el2org
;;
;; However =ellit-org= includes simple templating system, which is nice
;; to have thing in documentation generator tool.
;;
;; * Why?
;;
;; Separate files for code and documentanion is hard to get in sync.
;; Once changing something in source code files, you might change
;; comments as well and forget about documentation.
;;
;; Also many things, useful for documentation, might be automatically
;; extracted from source code.  Such as:
;; - Keybindings
;; - Customizable options
;; - Docstrings for commands
;; - etc
;;
;; * Using ellit-org in your project
;;
;; Sample Makefile to generate user manual for the project:
;;
;; #+BEGIN_SRC Makefile
;; EMACS=emacs -Q
;;
;; manual.org: srcfile.el <list-of-other-files-used-to-generate-manual>
;;      $(EMACS) -batch -f package-initialize -l ellit-org \
;;                  --eval '(ellit-org-file "srcfile.el" "manual.org")'
;; #+END_SRC
;;
;; * Commenting .el files
;;
;; 1. Use double-semicolon comments, otherwise processing won't start
;; 2. Processing starts when Org mode's property, heading or list is seen
;; 3. Processing starts only if matched comment line begins commentary
;;    block, i.e. previous line is a non-commentary line
;; 4. Processing stops on any non-commentary line
;;
;; Here is the example:
;; #+begin_src emacs-lisp
;;   ;; * Heading1                        <--- processing starts here
;;   ;; This line is included into output
;;   ;;
;;   ;; This line also included into output
;;                                        <--- processing stops here
;;   ;; This line is NOT included into output
;;   ;; * This line also NOT included
;;   ;;   Since it does not begin the commentary block, see 3.
;;
;;   ;; - However this line, is included  <--- processing starts here
;;   ;;
;;   ;;    Since new processing is started, and it will stop only on
;;   ;;    non-commentary line below
;;                                        <--- processing stops here
;;   ;; This line is *not* included
;; #+end_src
;;


;;; Code:
(require 'subr-x)                       ;replace-region-contents
(require 'svg)                          ;for `ellit-org--logo-image'

(defconst ellit-org-comment-start-regexp
  (rx (0+ (regexp "\s")) ";;"
      (or (regexp "\s") eol)))

(defvar ellit-org-start-regexp
  (rx (or buffer-start
          (and line-start (0+ (not ";")) "\n"))

      line-start (0+ (regexp "\s")) ";;" (1+ space)
      (or "#+"
          (and (or (1+ "*") "+" "-"
                   (and (1+ digit) (or "." ")")))
               space)))
  "Regexp matching start of the text to extract.")

(defvar ellit-org-template-regexp
  ">>>\\([a-zA-Z0-9-]+\\)\s*\\([^<]*\\)<<<"
  "Regexp for the template syntax.")

;; * Templating
;;
;; ellit-org includes very simple templating system to automatically
;; extract useful bits from source code or from Emacs runtime.
;;
;; Templates substitution is done *after* processing comments, so make
;; sure your templates are in processed part of the comments.
;;
;; Templates syntax:
;; #+begin_example
;; >>>TEMPLATE_NAME ARGUMENTS<<<
;; #+end_example
;; ~ARGUMENTS~ are optional string supplied to function which does
;; processing for ~TEMPLATE_NAME~.
;;
;; Supported templates:
(defvar ellit-org-template-alist
  '(
    ;; - ELLIT <file> ::
    ;;   >>>FUNDOC1 ellit-org-template-ellit<<<
    ("ELLIT" . ellit-org-template-ellit)

    ;; - ELFILE ::
    ;;   >>>FUNDOC1 ellit-org-template-elfile<<<
    ("ELFILE" . ellit-org-template-elfile)

    ;; - EVAL <form> ::
    ;;   >>>FUNDOC1 ellit-org-template-eval<<<
    ("EVAL" . ellit-org-template-eval)

    ;; - KEY-V1 [<keymap>:]<command> ::
    ;;   >>>FUNDOC1 ellit-org-template-key1<<<
    ("KEY-V1" . ellit-org-template-key1)

    ;; - KEY-V2 [<keymap>:]<command> ::
    ;;   >>>FUNDOC1 ellit-org-template-key2<<<
    ("KEY-V2" . ellit-org-template-key2)

    ;; - VARDOC1 <variable> ::
    ;;   >>>FUNDOC1 ellit-org-template-vardoc1<<<
    ("VARDOC1" . ellit-org-template-vardoc1)

    ;; - VARDOC <variable> ::
    ;;   >>>FUNDOC1 ellit-org-template-vardoc<<<
    ("VARDOC" . ellit-org-template-vardoc)

    ;; - FUNDOC1 <function> ::
    ;;   >>>FUNDOC1 ellit-org-template-fundoc1<<<
    ("FUNDOC1" . ellit-org-template-fundoc1)

    ;; - FUNDOC <function> ::
    ;;   >>>FUNDOC1 ellit-org-template-fundoc<<<
    ("FUNDOC" . ellit-org-template-fundoc))
  "Alist of available templates.
Each element in form:
  (TEMPLATE-NAME . TEMPLATE-FUNC)
TEMPLATE-FUNC is called with single string(or nil) argument.")

(defvar ellit-org-directory nil
  "Bind this var to the current ellit-doc directory.
Used to lookup file in >>>ELLIT file.el<<< template.")

(defvar ellit-org-elfile nil
  "Currently processing filename.
Used to expand >>>ELFILE<<< template.")

(defun ellit-org-apply-template (name &optional arg)
  "Return value for the template chunk with NAME.
Optional string ARG could be given.
Return newtext or nil."
  (when-let ((template (assoc name ellit-org-template-alist)))
    (funcall (cdr template) arg)))

(defun ellit-org-apply-all-templates ()
  "Replace all template chunks in current buffer with their values."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward ellit-org-template-regexp nil t)
      (let* ((beg (match-beginning 0))
             (end (match-end 0))
             (template-name (match-string 1))
             (template-arg (match-string 2))
             (new-text (ellit-org-apply-template template-name template-arg)))
        (when new-text
          (replace-region-contents beg end (lambda () new-text)))))))

(defun ellit-org-extract-comments ()
  "Extract comments from current buffer."
  (save-excursion
    (goto-char (point-min))
    (let (cpont)
      (while (progn (setq cpont (point))
                    (re-search-forward ellit-org-start-regexp nil 'no-error))
        (beginning-of-line)
        (delete-region cpont (point))

        ;; Scan line by line, stopping at non-commentary string
        (while (looking-at ellit-org-comment-start-regexp)
          (let ((del-point (match-end 0))
                (eol-point (point-at-eol)))
            ;; DO NOT strip "\n"
            (when (> del-point eol-point)
              (setq del-point eol-point))
            (delete-region (point) del-point))

          (forward-line 1)
          (beginning-of-line))
        (delete-region (point-at-bol) (point-at-eol)))

      (delete-region cpont (point-max)))))

(defun ellit-org-file (el-file &optional output-org-file custom-template-alist)
  "Extract documentation from EL-FILE.
Write to OUTPUT-ORG-FILE, or return as string.
CUSTOM-TEMPLATE-ALIST specifies custom templates to use in EL-FILE processing.
CUSTOM-TEMPLATE-ALIST are prepended to `ellit-org-template-alist'."
  (let* ((ellit-org-elfile (expand-file-name el-file ellit-org-directory))
         (ellit-org-directory (file-name-directory ellit-org-elfile))
         (ellit-org-template-alist
          (nconc (copy-sequence custom-template-alist)
                 ellit-org-template-alist)))
    (with-temp-buffer
      (insert-file-contents ellit-org-elfile)
      (ellit-org-extract-comments)
      (ellit-org-apply-all-templates)
      (if output-org-file
          (write-region (point-min) (point-max) output-org-file
                        nil 'quiet)
        (buffer-string)))))

;; See discussion about logo - https://t.me/emacs_en/10417
(defun ellit-org--logo-image (&optional size)
  "Generate logo for the `ellit-org'."
  (unless size (setq size 256))
  (let* ((logo-svg (svg-create size size))
         (border-size (/ size 32))
         (bracket-h (/ size 4))
         (bracket-w (/ (- size (* border-size 6)) 6)))
    (svg-gradient logo-svg "cgrad1" 'linear
                  (list '(0 . "#8280c2") (cons size "#9146bc")))
    (svg-circle logo-svg (/ size 2) (/ size 2) (- (/ size 2) border-size)
                :stroke-width border-size
                :stroke-color "#592a80"
                :gradient "cgrad1")
    ;; Draw brackets
    (dotimes (n 6)
      (let* ((x-off (+ (* border-size 6) (* n (/ bracket-w 1.75))))
             (b-x x-off)
             (m-x (+ x-off bracket-w)))
        ;; NOTE: swap `b-x' and `m-x' after third bracket
        (when (> n 2)
          (setq b-x (prog1 m-x (setq m-x b-x)))
          (setq b-x (+ b-x (/ bracket-w 1.25)))
          (setq m-x (+ m-x (/ bracket-w 1.25))))

        (svg-polyline logo-svg (list (cons b-x (- (/ size 2) bracket-h))
                                     (cons m-x (/ size 2))
                                     (cons b-x (+ (/ size 2) bracket-h)))
                      :stroke-width (* border-size 1.5)
                      :stroke-color "white"
                      :fill "none")))

    (svg-image logo-svg :scale 1.0
               :width size :height size
               :ascent 'center)))

(defun ellit-org--save-logo (file &optional size)
  "Write ellit svg logo into FILE."
  (let ((logo-image (ellit-org--logo-image size)))
    (write-region "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" nil
                  file nil 'quiet)
    (write-region (plist-get (cdr logo-image) :data) nil
                  file 'append 'quiet)))


;;; Templates
(defun ellit-org-template-ellit (file)
  "Insert results of the FILE processing."
  ;; NOTE: remove trailing \n, to not insert double newline for
  ;; >>>ELLIT file<<<
  (let ((output (ellit-org-file file)))
    (if (string-suffix-p "\n" output)
        (substring output 0 -1)
      output)))

(defun ellit-org-template-elfile (_ignored)
  "Insert currently processing filename."
  (file-name-nondirectory ellit-org-elfile))

(defun ellit-org-template-eval (form)
  "Insert result of the FORM evaluation."
  (eval (read form)))

(defun ellit-org-template-key1 (arg)
  "Insert keybinding for the command. NOTYET DONE
ARG is either form:
  1) \"<command>\"  - lookup for <command> in `global-map'
  2) \"<keymap>:<command>\" - lookup for <command> in <keymap>
"
  ;; Resemble magit manual, i.e.
  ;; - Key: C-c 1, C-c 2, ~command-fun~
  ;;
  ;;      Documentary for the <command-fun>.
  )

(defun ellit-org-template-key2 (arg)
  "Insert keybinding for the command. NOTYET DONE"
  ;; Resemble org manual, i.e.
  ;; - {{{kbd(C-c 1)}}}, {{{kbd(C-c 2)}}} (~command-fun~) ::
  ;;
  ;;      #+kindex: C-c C-f
  ;;      #+findex: command-fun
  ;;      Documentary for the <command-fun>.
  )

(defun ellit-org--vardoc (varname &optional first-line-p)
  "Return docstring for the variable named by VARNAME.
If FIRST-LINE-P is non-nil, then return only first line of the docstring."
  (let* ((varsym (intern varname))
         (vardoc (documentation-property varsym 'variable-documentation)))
    (when vardoc
      (if first-line-p
          (car (split-string vardoc "\n"))
        vardoc))))

(defun ellit-org-template-vardoc1 (variable)
  "Insert first line from docstring for the VARIABLE."
  (ellit-org--vardoc variable 'first-line))

(defun ellit-org-template-vardoc (variable)
  "Insert full docstring for the VARIABLE."
  (ellit-org--vardoc variable))

(defun ellit-org--fundoc (funname &optional first-line-p)
  "Return docstring for the function named by FUNNAME.
If FIRST-LINE-P is non-nil, then return only first line of the docstring."
  (let* ((funsym (intern funname))
         (fundoc (documentation funsym)))
    (when fundoc
      (if first-line-p
          (car (split-string fundoc "\n"))
        fundoc))))

(defun ellit-org-template-fundoc1 (function)
  "Insert first line from docstring for the FUNCTION."
  (ellit-org--fundoc function 'first-line))

(defun ellit-org-template-fundoc (function)
  "Insert full docstring for the FUNCTION."
  (ellit-org--fundoc function))

(provide 'ellit-org)

;;; ellit-org.el ends here
